// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: proto/greeting/greeting.proto

package greeting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GreetingService_Greet_FullMethodName        = "/GreetingService/Greet"
	GreetingService_SayManyHello_FullMethodName = "/GreetingService/SayManyHello"
)

// GreetingServiceClient is the client API for GreetingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetingServiceClient interface {
	Greet(ctx context.Context, in *GreetingsRequest, opts ...grpc.CallOption) (*GreetingsResponse, error)
	SayManyHello(ctx context.Context, in *GreetingsRequest, opts ...grpc.CallOption) (GreetingService_SayManyHelloClient, error)
}

type greetingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetingServiceClient(cc grpc.ClientConnInterface) GreetingServiceClient {
	return &greetingServiceClient{cc}
}

func (c *greetingServiceClient) Greet(ctx context.Context, in *GreetingsRequest, opts ...grpc.CallOption) (*GreetingsResponse, error) {
	out := new(GreetingsResponse)
	err := c.cc.Invoke(ctx, GreetingService_Greet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetingServiceClient) SayManyHello(ctx context.Context, in *GreetingsRequest, opts ...grpc.CallOption) (GreetingService_SayManyHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetingService_ServiceDesc.Streams[0], GreetingService_SayManyHello_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greetingServiceSayManyHelloClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetingService_SayManyHelloClient interface {
	Recv() (*GreetingsResponse, error)
	grpc.ClientStream
}

type greetingServiceSayManyHelloClient struct {
	grpc.ClientStream
}

func (x *greetingServiceSayManyHelloClient) Recv() (*GreetingsResponse, error) {
	m := new(GreetingsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetingServiceServer is the server API for GreetingService service.
// All implementations must embed UnimplementedGreetingServiceServer
// for forward compatibility
type GreetingServiceServer interface {
	Greet(context.Context, *GreetingsRequest) (*GreetingsResponse, error)
	SayManyHello(*GreetingsRequest, GreetingService_SayManyHelloServer) error
	mustEmbedUnimplementedGreetingServiceServer()
}

// UnimplementedGreetingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetingServiceServer struct {
}

func (UnimplementedGreetingServiceServer) Greet(context.Context, *GreetingsRequest) (*GreetingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greet not implemented")
}
func (UnimplementedGreetingServiceServer) SayManyHello(*GreetingsRequest, GreetingService_SayManyHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method SayManyHello not implemented")
}
func (UnimplementedGreetingServiceServer) mustEmbedUnimplementedGreetingServiceServer() {}

// UnsafeGreetingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetingServiceServer will
// result in compilation errors.
type UnsafeGreetingServiceServer interface {
	mustEmbedUnimplementedGreetingServiceServer()
}

func RegisterGreetingServiceServer(s grpc.ServiceRegistrar, srv GreetingServiceServer) {
	s.RegisterService(&GreetingService_ServiceDesc, srv)
}

func _GreetingService_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetingServiceServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreetingService_Greet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetingServiceServer).Greet(ctx, req.(*GreetingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetingService_SayManyHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GreetingsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetingServiceServer).SayManyHello(m, &greetingServiceSayManyHelloServer{stream})
}

type GreetingService_SayManyHelloServer interface {
	Send(*GreetingsResponse) error
	grpc.ServerStream
}

type greetingServiceSayManyHelloServer struct {
	grpc.ServerStream
}

func (x *greetingServiceSayManyHelloServer) Send(m *GreetingsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GreetingService_ServiceDesc is the grpc.ServiceDesc for GreetingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GreetingService",
	HandlerType: (*GreetingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greet",
			Handler:    _GreetingService_Greet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayManyHello",
			Handler:       _GreetingService_SayManyHello_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/greeting/greeting.proto",
}
